// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Auth2 is an object representing the database table.
type Auth2 struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID         int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	QQOpenid       null.String `boil:"qq_openid" json:"qq_openid,omitempty" toml:"qq_openid" yaml:"qq_openid,omitempty"`
	QQUsername     null.String `boil:"qq_username" json:"qq_username,omitempty" toml:"qq_username" yaml:"qq_username,omitempty"`
	QQAvatar       null.String `boil:"qq_avatar" json:"qq_avatar,omitempty" toml:"qq_avatar" yaml:"qq_avatar,omitempty"`
	WechatOpenid   null.String `boil:"wechat_openid" json:"wechat_openid,omitempty" toml:"wechat_openid" yaml:"wechat_openid,omitempty"`
	WechatUsername null.String `boil:"wechat_username" json:"wechat_username,omitempty" toml:"wechat_username" yaml:"wechat_username,omitempty"`
	WechatAvatar   null.String `boil:"wechat_avatar" json:"wechat_avatar,omitempty" toml:"wechat_avatar" yaml:"wechat_avatar,omitempty"`
	UID            null.String `boil:"uid" json:"uid,omitempty" toml:"uid" yaml:"uid,omitempty"`
	WeiboUsername  null.String `boil:"weibo_username" json:"weibo_username,omitempty" toml:"weibo_username" yaml:"weibo_username,omitempty"`
	WeiboAvatar    null.String `boil:"weibo_avatar" json:"weibo_avatar,omitempty" toml:"weibo_avatar" yaml:"weibo_avatar,omitempty"`
	GithubID       null.String `boil:"github_id" json:"github_id,omitempty" toml:"github_id" yaml:"github_id,omitempty"`
	GithubUsername null.String `boil:"github_username" json:"github_username,omitempty" toml:"github_username" yaml:"github_username,omitempty"`
	GithubAvatar   null.String `boil:"github_avatar" json:"github_avatar,omitempty" toml:"github_avatar" yaml:"github_avatar,omitempty"`
	CreateTime     time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime     time.Time   `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *auth2R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auth2L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Auth2Columns = struct {
	ID             string
	UserID         string
	QQOpenid       string
	QQUsername     string
	QQAvatar       string
	WechatOpenid   string
	WechatUsername string
	WechatAvatar   string
	UID            string
	WeiboUsername  string
	WeiboAvatar    string
	GithubID       string
	GithubUsername string
	GithubAvatar   string
	CreateTime     string
	UpdateTime     string
}{
	ID:             "id",
	UserID:         "user_id",
	QQOpenid:       "qq_openid",
	QQUsername:     "qq_username",
	QQAvatar:       "qq_avatar",
	WechatOpenid:   "wechat_openid",
	WechatUsername: "wechat_username",
	WechatAvatar:   "wechat_avatar",
	UID:            "uid",
	WeiboUsername:  "weibo_username",
	WeiboAvatar:    "weibo_avatar",
	GithubID:       "github_id",
	GithubUsername: "github_username",
	GithubAvatar:   "github_avatar",
	CreateTime:     "create_time",
	UpdateTime:     "update_time",
}

var Auth2TableColumns = struct {
	ID             string
	UserID         string
	QQOpenid       string
	QQUsername     string
	QQAvatar       string
	WechatOpenid   string
	WechatUsername string
	WechatAvatar   string
	UID            string
	WeiboUsername  string
	WeiboAvatar    string
	GithubID       string
	GithubUsername string
	GithubAvatar   string
	CreateTime     string
	UpdateTime     string
}{
	ID:             "auth2.id",
	UserID:         "auth2.user_id",
	QQOpenid:       "auth2.qq_openid",
	QQUsername:     "auth2.qq_username",
	QQAvatar:       "auth2.qq_avatar",
	WechatOpenid:   "auth2.wechat_openid",
	WechatUsername: "auth2.wechat_username",
	WechatAvatar:   "auth2.wechat_avatar",
	UID:            "auth2.uid",
	WeiboUsername:  "auth2.weibo_username",
	WeiboAvatar:    "auth2.weibo_avatar",
	GithubID:       "auth2.github_id",
	GithubUsername: "auth2.github_username",
	GithubAvatar:   "auth2.github_avatar",
	CreateTime:     "auth2.create_time",
	UpdateTime:     "auth2.update_time",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var Auth2Where = struct {
	ID             whereHelperint
	UserID         whereHelperint
	QQOpenid       whereHelpernull_String
	QQUsername     whereHelpernull_String
	QQAvatar       whereHelpernull_String
	WechatOpenid   whereHelpernull_String
	WechatUsername whereHelpernull_String
	WechatAvatar   whereHelpernull_String
	UID            whereHelpernull_String
	WeiboUsername  whereHelpernull_String
	WeiboAvatar    whereHelpernull_String
	GithubID       whereHelpernull_String
	GithubUsername whereHelpernull_String
	GithubAvatar   whereHelpernull_String
	CreateTime     whereHelpertime_Time
	UpdateTime     whereHelpertime_Time
}{
	ID:             whereHelperint{field: "`auth2`.`id`"},
	UserID:         whereHelperint{field: "`auth2`.`user_id`"},
	QQOpenid:       whereHelpernull_String{field: "`auth2`.`qq_openid`"},
	QQUsername:     whereHelpernull_String{field: "`auth2`.`qq_username`"},
	QQAvatar:       whereHelpernull_String{field: "`auth2`.`qq_avatar`"},
	WechatOpenid:   whereHelpernull_String{field: "`auth2`.`wechat_openid`"},
	WechatUsername: whereHelpernull_String{field: "`auth2`.`wechat_username`"},
	WechatAvatar:   whereHelpernull_String{field: "`auth2`.`wechat_avatar`"},
	UID:            whereHelpernull_String{field: "`auth2`.`uid`"},
	WeiboUsername:  whereHelpernull_String{field: "`auth2`.`weibo_username`"},
	WeiboAvatar:    whereHelpernull_String{field: "`auth2`.`weibo_avatar`"},
	GithubID:       whereHelpernull_String{field: "`auth2`.`github_id`"},
	GithubUsername: whereHelpernull_String{field: "`auth2`.`github_username`"},
	GithubAvatar:   whereHelpernull_String{field: "`auth2`.`github_avatar`"},
	CreateTime:     whereHelpertime_Time{field: "`auth2`.`create_time`"},
	UpdateTime:     whereHelpertime_Time{field: "`auth2`.`update_time`"},
}

// Auth2Rels is where relationship names are stored.
var Auth2Rels = struct {
}{}

// auth2R is where relationships are stored.
type auth2R struct {
}

// NewStruct creates a new relationship struct
func (*auth2R) NewStruct() *auth2R {
	return &auth2R{}
}

// auth2L is where Load methods for each relationship are stored.
type auth2L struct{}

var (
	auth2AllColumns            = []string{"id", "user_id", "qq_openid", "qq_username", "qq_avatar", "wechat_openid", "wechat_username", "wechat_avatar", "uid", "weibo_username", "weibo_avatar", "github_id", "github_username", "github_avatar", "create_time", "update_time"}
	auth2ColumnsWithoutDefault = []string{"user_id", "qq_openid", "qq_username", "qq_avatar", "wechat_openid", "wechat_username", "wechat_avatar", "uid", "weibo_username", "weibo_avatar", "github_id", "github_username", "github_avatar"}
	auth2ColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	auth2PrimaryKeyColumns     = []string{"id"}
)

type (
	// Auth2Slice is an alias for a slice of pointers to Auth2.
	// This should almost always be used instead of []Auth2.
	Auth2Slice []*Auth2
	// Auth2Hook is the signature for custom Auth2 hook methods
	Auth2Hook func(context.Context, boil.ContextExecutor, *Auth2) error

	auth2Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auth2Type                 = reflect.TypeOf(&Auth2{})
	auth2Mapping              = queries.MakeStructMapping(auth2Type)
	auth2PrimaryKeyMapping, _ = queries.BindMapping(auth2Type, auth2Mapping, auth2PrimaryKeyColumns)
	auth2InsertCacheMut       sync.RWMutex
	auth2InsertCache          = make(map[string]insertCache)
	auth2UpdateCacheMut       sync.RWMutex
	auth2UpdateCache          = make(map[string]updateCache)
	auth2UpsertCacheMut       sync.RWMutex
	auth2UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auth2BeforeInsertHooks []Auth2Hook
var auth2BeforeUpdateHooks []Auth2Hook
var auth2BeforeDeleteHooks []Auth2Hook
var auth2BeforeUpsertHooks []Auth2Hook

var auth2AfterInsertHooks []Auth2Hook
var auth2AfterSelectHooks []Auth2Hook
var auth2AfterUpdateHooks []Auth2Hook
var auth2AfterDeleteHooks []Auth2Hook
var auth2AfterUpsertHooks []Auth2Hook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Auth2) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Auth2) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Auth2) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Auth2) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Auth2) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Auth2) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Auth2) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Auth2) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Auth2) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auth2AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuth2Hook registers your hook function for all future operations.
func AddAuth2Hook(hookPoint boil.HookPoint, auth2Hook Auth2Hook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		auth2BeforeInsertHooks = append(auth2BeforeInsertHooks, auth2Hook)
	case boil.BeforeUpdateHook:
		auth2BeforeUpdateHooks = append(auth2BeforeUpdateHooks, auth2Hook)
	case boil.BeforeDeleteHook:
		auth2BeforeDeleteHooks = append(auth2BeforeDeleteHooks, auth2Hook)
	case boil.BeforeUpsertHook:
		auth2BeforeUpsertHooks = append(auth2BeforeUpsertHooks, auth2Hook)
	case boil.AfterInsertHook:
		auth2AfterInsertHooks = append(auth2AfterInsertHooks, auth2Hook)
	case boil.AfterSelectHook:
		auth2AfterSelectHooks = append(auth2AfterSelectHooks, auth2Hook)
	case boil.AfterUpdateHook:
		auth2AfterUpdateHooks = append(auth2AfterUpdateHooks, auth2Hook)
	case boil.AfterDeleteHook:
		auth2AfterDeleteHooks = append(auth2AfterDeleteHooks, auth2Hook)
	case boil.AfterUpsertHook:
		auth2AfterUpsertHooks = append(auth2AfterUpsertHooks, auth2Hook)
	}
}

// One returns a single auth2 record from the query.
func (q auth2Query) One(ctx context.Context, exec boil.ContextExecutor) (*Auth2, error) {
	o := &Auth2{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth2")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Auth2 records from the query.
func (q auth2Query) All(ctx context.Context, exec boil.ContextExecutor) (Auth2Slice, error) {
	var o []*Auth2

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Auth2 slice")
	}

	if len(auth2AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Auth2 records in the query.
func (q auth2Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth2 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q auth2Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth2 exists")
	}

	return count > 0, nil
}

// Auth2s retrieves all the records using an executor.
func Auth2s(mods ...qm.QueryMod) auth2Query {
	mods = append(mods, qm.From("`auth2`"))
	return auth2Query{NewQuery(mods...)}
}

// FindAuth2 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuth2(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Auth2, error) {
	auth2Obj := &Auth2{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth2` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auth2Obj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth2")
	}

	if err = auth2Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return auth2Obj, err
	}

	return auth2Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Auth2) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth2 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auth2ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auth2InsertCacheMut.RLock()
	cache, cached := auth2InsertCache[key]
	auth2InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auth2AllColumns,
			auth2ColumnsWithDefault,
			auth2ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auth2Type, auth2Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auth2Type, auth2Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `auth2` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `auth2` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth2` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, auth2PrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth2")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == auth2Mapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth2")
	}

CacheNoHooks:
	if !cached {
		auth2InsertCacheMut.Lock()
		auth2InsertCache[key] = cache
		auth2InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Auth2.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Auth2) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auth2UpdateCacheMut.RLock()
	cache, cached := auth2UpdateCache[key]
	auth2UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auth2AllColumns,
			auth2PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth2, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth2` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, auth2PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auth2Type, auth2Mapping, append(wl, auth2PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth2 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth2")
	}

	if !cached {
		auth2UpdateCacheMut.Lock()
		auth2UpdateCache[key] = cache
		auth2UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q auth2Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth2")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Auth2Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auth2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `auth2` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auth2PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auth2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auth2")
	}
	return rowsAff, nil
}

var mySQLAuth2UniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Auth2) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth2 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auth2ColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuth2UniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auth2UpsertCacheMut.RLock()
	cache, cached := auth2UpsertCache[key]
	auth2UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			auth2AllColumns,
			auth2ColumnsWithDefault,
			auth2ColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			auth2AllColumns,
			auth2PrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert auth2, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`auth2`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth2` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(auth2Type, auth2Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auth2Type, auth2Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth2")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == auth2Mapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(auth2Type, auth2Mapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for auth2")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth2")
	}

CacheNoHooks:
	if !cached {
		auth2UpsertCacheMut.Lock()
		auth2UpsertCache[key] = cache
		auth2UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Auth2 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Auth2) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Auth2 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auth2PrimaryKeyMapping)
	sql := "DELETE FROM `auth2` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth2")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q auth2Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auth2Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth2")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth2")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Auth2Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auth2BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auth2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `auth2` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auth2PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth2 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth2")
	}

	if len(auth2AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Auth2) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuth2(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Auth2Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Auth2Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auth2PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `auth2`.* FROM `auth2` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auth2PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in Auth2Slice")
	}

	*o = slice

	return nil
}

// Auth2Exists checks if the Auth2 row exists.
func Auth2Exists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `auth2` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth2 exists")
	}

	return exists, nil
}
