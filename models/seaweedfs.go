// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Seaweedf is an object representing the database table.
type Seaweedf struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SeaweedfsURL string    `boil:"seaweedfs_url" json:"seaweedfs_url" toml:"seaweedfs_url" yaml:"seaweedfs_url"`
	ServerURL    string    `boil:"server_url" json:"server_url" toml:"server_url" yaml:"server_url"`
	CreateTime   time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime   time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *seaweedfR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seaweedfL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeaweedfColumns = struct {
	ID           string
	UserID       string
	SeaweedfsURL string
	ServerURL    string
	CreateTime   string
	UpdateTime   string
}{
	ID:           "id",
	UserID:       "user_id",
	SeaweedfsURL: "seaweedfs_url",
	ServerURL:    "server_url",
	CreateTime:   "create_time",
	UpdateTime:   "update_time",
}

var SeaweedfTableColumns = struct {
	ID           string
	UserID       string
	SeaweedfsURL string
	ServerURL    string
	CreateTime   string
	UpdateTime   string
}{
	ID:           "seaweedfs.id",
	UserID:       "seaweedfs.user_id",
	SeaweedfsURL: "seaweedfs.seaweedfs_url",
	ServerURL:    "seaweedfs.server_url",
	CreateTime:   "seaweedfs.create_time",
	UpdateTime:   "seaweedfs.update_time",
}

// Generated where

var SeaweedfWhere = struct {
	ID           whereHelperint
	UserID       whereHelperint
	SeaweedfsURL whereHelperstring
	ServerURL    whereHelperstring
	CreateTime   whereHelpertime_Time
	UpdateTime   whereHelpertime_Time
}{
	ID:           whereHelperint{field: "`seaweedfs`.`id`"},
	UserID:       whereHelperint{field: "`seaweedfs`.`user_id`"},
	SeaweedfsURL: whereHelperstring{field: "`seaweedfs`.`seaweedfs_url`"},
	ServerURL:    whereHelperstring{field: "`seaweedfs`.`server_url`"},
	CreateTime:   whereHelpertime_Time{field: "`seaweedfs`.`create_time`"},
	UpdateTime:   whereHelpertime_Time{field: "`seaweedfs`.`update_time`"},
}

// SeaweedfRels is where relationship names are stored.
var SeaweedfRels = struct {
}{}

// seaweedfR is where relationships are stored.
type seaweedfR struct {
}

// NewStruct creates a new relationship struct
func (*seaweedfR) NewStruct() *seaweedfR {
	return &seaweedfR{}
}

// seaweedfL is where Load methods for each relationship are stored.
type seaweedfL struct{}

var (
	seaweedfAllColumns            = []string{"id", "user_id", "seaweedfs_url", "server_url", "create_time", "update_time"}
	seaweedfColumnsWithoutDefault = []string{"user_id", "seaweedfs_url", "server_url"}
	seaweedfColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	seaweedfPrimaryKeyColumns     = []string{"id"}
)

type (
	// SeaweedfSlice is an alias for a slice of pointers to Seaweedf.
	// This should almost always be used instead of []Seaweedf.
	SeaweedfSlice []*Seaweedf
	// SeaweedfHook is the signature for custom Seaweedf hook methods
	SeaweedfHook func(context.Context, boil.ContextExecutor, *Seaweedf) error

	seaweedfQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seaweedfType                 = reflect.TypeOf(&Seaweedf{})
	seaweedfMapping              = queries.MakeStructMapping(seaweedfType)
	seaweedfPrimaryKeyMapping, _ = queries.BindMapping(seaweedfType, seaweedfMapping, seaweedfPrimaryKeyColumns)
	seaweedfInsertCacheMut       sync.RWMutex
	seaweedfInsertCache          = make(map[string]insertCache)
	seaweedfUpdateCacheMut       sync.RWMutex
	seaweedfUpdateCache          = make(map[string]updateCache)
	seaweedfUpsertCacheMut       sync.RWMutex
	seaweedfUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seaweedfBeforeInsertHooks []SeaweedfHook
var seaweedfBeforeUpdateHooks []SeaweedfHook
var seaweedfBeforeDeleteHooks []SeaweedfHook
var seaweedfBeforeUpsertHooks []SeaweedfHook

var seaweedfAfterInsertHooks []SeaweedfHook
var seaweedfAfterSelectHooks []SeaweedfHook
var seaweedfAfterUpdateHooks []SeaweedfHook
var seaweedfAfterDeleteHooks []SeaweedfHook
var seaweedfAfterUpsertHooks []SeaweedfHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Seaweedf) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Seaweedf) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Seaweedf) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Seaweedf) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Seaweedf) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Seaweedf) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Seaweedf) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Seaweedf) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Seaweedf) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seaweedfAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeaweedfHook registers your hook function for all future operations.
func AddSeaweedfHook(hookPoint boil.HookPoint, seaweedfHook SeaweedfHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		seaweedfBeforeInsertHooks = append(seaweedfBeforeInsertHooks, seaweedfHook)
	case boil.BeforeUpdateHook:
		seaweedfBeforeUpdateHooks = append(seaweedfBeforeUpdateHooks, seaweedfHook)
	case boil.BeforeDeleteHook:
		seaweedfBeforeDeleteHooks = append(seaweedfBeforeDeleteHooks, seaweedfHook)
	case boil.BeforeUpsertHook:
		seaweedfBeforeUpsertHooks = append(seaweedfBeforeUpsertHooks, seaweedfHook)
	case boil.AfterInsertHook:
		seaweedfAfterInsertHooks = append(seaweedfAfterInsertHooks, seaweedfHook)
	case boil.AfterSelectHook:
		seaweedfAfterSelectHooks = append(seaweedfAfterSelectHooks, seaweedfHook)
	case boil.AfterUpdateHook:
		seaweedfAfterUpdateHooks = append(seaweedfAfterUpdateHooks, seaweedfHook)
	case boil.AfterDeleteHook:
		seaweedfAfterDeleteHooks = append(seaweedfAfterDeleteHooks, seaweedfHook)
	case boil.AfterUpsertHook:
		seaweedfAfterUpsertHooks = append(seaweedfAfterUpsertHooks, seaweedfHook)
	}
}

// One returns a single seaweedf record from the query.
func (q seaweedfQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seaweedf, error) {
	o := &Seaweedf{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seaweedfs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Seaweedf records from the query.
func (q seaweedfQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeaweedfSlice, error) {
	var o []*Seaweedf

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Seaweedf slice")
	}

	if len(seaweedfAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Seaweedf records in the query.
func (q seaweedfQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seaweedfs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seaweedfQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seaweedfs exists")
	}

	return count > 0, nil
}

// Seaweedfs retrieves all the records using an executor.
func Seaweedfs(mods ...qm.QueryMod) seaweedfQuery {
	mods = append(mods, qm.From("`seaweedfs`"))
	return seaweedfQuery{NewQuery(mods...)}
}

// FindSeaweedf retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeaweedf(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Seaweedf, error) {
	seaweedfObj := &Seaweedf{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `seaweedfs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, seaweedfObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seaweedfs")
	}

	if err = seaweedfObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seaweedfObj, err
	}

	return seaweedfObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Seaweedf) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seaweedfs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seaweedfColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seaweedfInsertCacheMut.RLock()
	cache, cached := seaweedfInsertCache[key]
	seaweedfInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seaweedfAllColumns,
			seaweedfColumnsWithDefault,
			seaweedfColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seaweedfType, seaweedfMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seaweedfType, seaweedfMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `seaweedfs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `seaweedfs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `seaweedfs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, seaweedfPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seaweedfs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seaweedfMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seaweedfs")
	}

CacheNoHooks:
	if !cached {
		seaweedfInsertCacheMut.Lock()
		seaweedfInsertCache[key] = cache
		seaweedfInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Seaweedf.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Seaweedf) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seaweedfUpdateCacheMut.RLock()
	cache, cached := seaweedfUpdateCache[key]
	seaweedfUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seaweedfAllColumns,
			seaweedfPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seaweedfs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `seaweedfs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, seaweedfPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seaweedfType, seaweedfMapping, append(wl, seaweedfPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seaweedfs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seaweedfs")
	}

	if !cached {
		seaweedfUpdateCacheMut.Lock()
		seaweedfUpdateCache[key] = cache
		seaweedfUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seaweedfQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seaweedfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seaweedfs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeaweedfSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seaweedfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `seaweedfs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seaweedfPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in seaweedf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all seaweedf")
	}
	return rowsAff, nil
}

var mySQLSeaweedfUniqueColumns = []string{
	"id",
	"user_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Seaweedf) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seaweedfs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seaweedfColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSeaweedfUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seaweedfUpsertCacheMut.RLock()
	cache, cached := seaweedfUpsertCache[key]
	seaweedfUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seaweedfAllColumns,
			seaweedfColumnsWithDefault,
			seaweedfColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			seaweedfAllColumns,
			seaweedfPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert seaweedfs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`seaweedfs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `seaweedfs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(seaweedfType, seaweedfMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seaweedfType, seaweedfMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for seaweedfs")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seaweedfMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(seaweedfType, seaweedfMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for seaweedfs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seaweedfs")
	}

CacheNoHooks:
	if !cached {
		seaweedfUpsertCacheMut.Lock()
		seaweedfUpsertCache[key] = cache
		seaweedfUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Seaweedf record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Seaweedf) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Seaweedf provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seaweedfPrimaryKeyMapping)
	sql := "DELETE FROM `seaweedfs` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seaweedfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seaweedfs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seaweedfQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seaweedfQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seaweedfs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seaweedfs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeaweedfSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seaweedfBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seaweedfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `seaweedfs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seaweedfPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seaweedf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seaweedfs")
	}

	if len(seaweedfAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Seaweedf) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeaweedf(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeaweedfSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeaweedfSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seaweedfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `seaweedfs`.* FROM `seaweedfs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seaweedfPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeaweedfSlice")
	}

	*o = slice

	return nil
}

// SeaweedfExists checks if the Seaweedf row exists.
func SeaweedfExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `seaweedfs` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seaweedfs exists")
	}

	return exists, nil
}
