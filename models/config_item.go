// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigItem is an object representing the database table.
type ConfigItem struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID     int       `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	ItemName    string    `boil:"item_name" json:"item_name" toml:"item_name" yaml:"item_name"`
	Status      string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	Key         string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	KeyType     string    `boil:"key_type" json:"key_type" toml:"key_type" yaml:"key_type"`
	Value       string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Source      string    `boil:"source" json:"source" toml:"source" yaml:"source"`
	Version     string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	CurVersion  string    `boil:"cur_version" json:"cur_version" toml:"cur_version" yaml:"cur_version"`
	CreateTime  time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime  time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *configItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigItemColumns = struct {
	ID          string
	GroupID     string
	ItemName    string
	Status      string
	Key         string
	KeyType     string
	Value       string
	Description string
	Source      string
	Version     string
	CurVersion  string
	CreateTime  string
	UpdateTime  string
}{
	ID:          "id",
	GroupID:     "group_id",
	ItemName:    "item_name",
	Status:      "status",
	Key:         "key",
	KeyType:     "key_type",
	Value:       "value",
	Description: "description",
	Source:      "source",
	Version:     "version",
	CurVersion:  "cur_version",
	CreateTime:  "create_time",
	UpdateTime:  "update_time",
}

var ConfigItemTableColumns = struct {
	ID          string
	GroupID     string
	ItemName    string
	Status      string
	Key         string
	KeyType     string
	Value       string
	Description string
	Source      string
	Version     string
	CurVersion  string
	CreateTime  string
	UpdateTime  string
}{
	ID:          "config_item.id",
	GroupID:     "config_item.group_id",
	ItemName:    "config_item.item_name",
	Status:      "config_item.status",
	Key:         "config_item.key",
	KeyType:     "config_item.key_type",
	Value:       "config_item.value",
	Description: "config_item.description",
	Source:      "config_item.source",
	Version:     "config_item.version",
	CurVersion:  "config_item.cur_version",
	CreateTime:  "config_item.create_time",
	UpdateTime:  "config_item.update_time",
}

// Generated where

var ConfigItemWhere = struct {
	ID          whereHelperint
	GroupID     whereHelperint
	ItemName    whereHelperstring
	Status      whereHelperstring
	Key         whereHelperstring
	KeyType     whereHelperstring
	Value       whereHelperstring
	Description whereHelperstring
	Source      whereHelperstring
	Version     whereHelperstring
	CurVersion  whereHelperstring
	CreateTime  whereHelpertime_Time
	UpdateTime  whereHelpertime_Time
}{
	ID:          whereHelperint{field: "`config_item`.`id`"},
	GroupID:     whereHelperint{field: "`config_item`.`group_id`"},
	ItemName:    whereHelperstring{field: "`config_item`.`item_name`"},
	Status:      whereHelperstring{field: "`config_item`.`status`"},
	Key:         whereHelperstring{field: "`config_item`.`key`"},
	KeyType:     whereHelperstring{field: "`config_item`.`key_type`"},
	Value:       whereHelperstring{field: "`config_item`.`value`"},
	Description: whereHelperstring{field: "`config_item`.`description`"},
	Source:      whereHelperstring{field: "`config_item`.`source`"},
	Version:     whereHelperstring{field: "`config_item`.`version`"},
	CurVersion:  whereHelperstring{field: "`config_item`.`cur_version`"},
	CreateTime:  whereHelpertime_Time{field: "`config_item`.`create_time`"},
	UpdateTime:  whereHelpertime_Time{field: "`config_item`.`update_time`"},
}

// ConfigItemRels is where relationship names are stored.
var ConfigItemRels = struct {
}{}

// configItemR is where relationships are stored.
type configItemR struct {
}

// NewStruct creates a new relationship struct
func (*configItemR) NewStruct() *configItemR {
	return &configItemR{}
}

// configItemL is where Load methods for each relationship are stored.
type configItemL struct{}

var (
	configItemAllColumns            = []string{"id", "group_id", "item_name", "status", "key", "key_type", "value", "description", "source", "version", "cur_version", "create_time", "update_time"}
	configItemColumnsWithoutDefault = []string{"group_id", "item_name", "status", "key", "key_type", "value", "description", "source", "version", "cur_version"}
	configItemColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	configItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigItemSlice is an alias for a slice of pointers to ConfigItem.
	// This should almost always be used instead of []ConfigItem.
	ConfigItemSlice []*ConfigItem
	// ConfigItemHook is the signature for custom ConfigItem hook methods
	ConfigItemHook func(context.Context, boil.ContextExecutor, *ConfigItem) error

	configItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configItemType                 = reflect.TypeOf(&ConfigItem{})
	configItemMapping              = queries.MakeStructMapping(configItemType)
	configItemPrimaryKeyMapping, _ = queries.BindMapping(configItemType, configItemMapping, configItemPrimaryKeyColumns)
	configItemInsertCacheMut       sync.RWMutex
	configItemInsertCache          = make(map[string]insertCache)
	configItemUpdateCacheMut       sync.RWMutex
	configItemUpdateCache          = make(map[string]updateCache)
	configItemUpsertCacheMut       sync.RWMutex
	configItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configItemBeforeInsertHooks []ConfigItemHook
var configItemBeforeUpdateHooks []ConfigItemHook
var configItemBeforeDeleteHooks []ConfigItemHook
var configItemBeforeUpsertHooks []ConfigItemHook

var configItemAfterInsertHooks []ConfigItemHook
var configItemAfterSelectHooks []ConfigItemHook
var configItemAfterUpdateHooks []ConfigItemHook
var configItemAfterDeleteHooks []ConfigItemHook
var configItemAfterUpsertHooks []ConfigItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigItemHook registers your hook function for all future operations.
func AddConfigItemHook(hookPoint boil.HookPoint, configItemHook ConfigItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configItemBeforeInsertHooks = append(configItemBeforeInsertHooks, configItemHook)
	case boil.BeforeUpdateHook:
		configItemBeforeUpdateHooks = append(configItemBeforeUpdateHooks, configItemHook)
	case boil.BeforeDeleteHook:
		configItemBeforeDeleteHooks = append(configItemBeforeDeleteHooks, configItemHook)
	case boil.BeforeUpsertHook:
		configItemBeforeUpsertHooks = append(configItemBeforeUpsertHooks, configItemHook)
	case boil.AfterInsertHook:
		configItemAfterInsertHooks = append(configItemAfterInsertHooks, configItemHook)
	case boil.AfterSelectHook:
		configItemAfterSelectHooks = append(configItemAfterSelectHooks, configItemHook)
	case boil.AfterUpdateHook:
		configItemAfterUpdateHooks = append(configItemAfterUpdateHooks, configItemHook)
	case boil.AfterDeleteHook:
		configItemAfterDeleteHooks = append(configItemAfterDeleteHooks, configItemHook)
	case boil.AfterUpsertHook:
		configItemAfterUpsertHooks = append(configItemAfterUpsertHooks, configItemHook)
	}
}

// One returns a single configItem record from the query.
func (q configItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ConfigItem, error) {
	o := &ConfigItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ConfigItem records from the query.
func (q configItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigItemSlice, error) {
	var o []*ConfigItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigItem slice")
	}

	if len(configItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ConfigItem records in the query.
func (q configItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q configItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_item exists")
	}

	return count > 0, nil
}

// ConfigItems retrieves all the records using an executor.
func ConfigItems(mods ...qm.QueryMod) configItemQuery {
	mods = append(mods, qm.From("`config_item`"))
	return configItemQuery{NewQuery(mods...)}
}

// FindConfigItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ConfigItem, error) {
	configItemObj := &ConfigItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `config_item` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, configItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_item")
	}

	if err = configItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return configItemObj, err
	}

	return configItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configItemInsertCacheMut.RLock()
	cache, cached := configItemInsertCache[key]
	configItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configItemAllColumns,
			configItemColumnsWithDefault,
			configItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configItemType, configItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `config_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `config_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `config_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, configItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_item")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == configItemMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for config_item")
	}

CacheNoHooks:
	if !cached {
		configItemInsertCacheMut.Lock()
		configItemInsertCache[key] = cache
		configItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ConfigItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configItemUpdateCacheMut.RLock()
	cache, cached := configItemUpdateCache[key]
	configItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configItemAllColumns,
			configItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `config_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, configItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, append(wl, configItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_item")
	}

	if !cached {
		configItemUpdateCacheMut.Lock()
		configItemUpdateCache[key] = cache
		configItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q configItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `config_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configItem")
	}
	return rowsAff, nil
}

var mySQLConfigItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLConfigItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configItemUpsertCacheMut.RLock()
	cache, cached := configItemUpsertCache[key]
	configItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configItemAllColumns,
			configItemColumnsWithDefault,
			configItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configItemAllColumns,
			configItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert config_item, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`config_item`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `config_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configItemType, configItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for config_item")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == configItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(configItemType, configItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for config_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for config_item")
	}

CacheNoHooks:
	if !cached {
		configItemUpsertCacheMut.Lock()
		configItemUpsertCache[key] = cache
		configItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ConfigItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configItemPrimaryKeyMapping)
	sql := "DELETE FROM `config_item` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q configItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `config_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_item")
	}

	if len(configItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfigItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `config_item`.* FROM `config_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigItemSlice")
	}

	*o = slice

	return nil
}

// ConfigItemExists checks if the ConfigItem row exists.
func ConfigItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `config_item` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_item exists")
	}

	return exists, nil
}
